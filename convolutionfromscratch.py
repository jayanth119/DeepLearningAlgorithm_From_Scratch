# -*- coding: utf-8 -*-
"""ConvolutionfromScratch.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w35kXRzlXok_xVkrZoBESsoJd2JLFbu0

**Convolution Operation**
A convolution operation consists of sliding a kernel across the width and height of an array and computing the sum of products of the corresponding intensities and weights.

**Importing_Dependencies:**
"""

import numpy as np
from PIL import Image
import matplotlib.pyplot as plt

"""**LoadImage**"""

img = Image.open("/content/spongbob.jpg")
print(img.size)
img = img.resize((130 , 130))
img

"""**ConvolutionFunction**"""

def convolution(img : np.array , kernel : np.array):
  result_size =img.shape[0] - kernel.shape[0]+1
  result  = np.zeros(shape =(result_size , result_size))
  k = kernel.shape[0]
  for  row in range(result_size):
    for column in range(result_size):
      mat = img[row : row + k , column : column+ k ]
      result[row , column ] += np.sum(np.multiply(mat , kernel ))
  return result

"""**Edge detection**"""

arr = np.array(img)
filter = np.array([[1, 1, 1], [1, -8, 1], [1, 1, 1]])

edged = []
print(arr.shape)
for i in range(3):
    print(i, "state started")
    res = convolution(arr, filter)
    edged.append(res)
    print(i, "state ended")

edged = np.array(edged).reshape((128, 128, 3))
plt.imshow(edged)
plt.axis('off')  # Turn off axis
plt.show()

"""**Sharp Convolution**

"""

arr = np.array(img)
filter = np.array([[0, -1, 0], [-1, -5, -1], [0, -1, 0]])

sharped = []
print(arr.shape)
for i in range(3):
    print(i, "state started")
    res = convolution(arr, filter)
    sharped.append(res)
    print(i, "state ended")

sharped = np.array(sharped).reshape((128, 128, 3))
edged = (edged - np.min(edged)) / (np.max(edged) - np.min(edged))
plt.imshow(sharped)
plt.axis('off')  # Turn off axis
plt.show()

"""**BlurcONVolution**"""

arr = np.array(img)
filter = np.array([[1/9, 1/9, 1/9], [1/9, 1/9, 1/9], [1/9, 1/9, 1/9]])

blured = []
print(arr.shape)
for i in range(3):
    print(i, "state started")
    res = convolution(arr, filter)
    blured.append(res)
    print(i, "state ended")
blured = np.array(blured).reshape((128, 128, 3))
plt.imshow(blured)
plt.axis('off')  # Turn off axis
plt.show()